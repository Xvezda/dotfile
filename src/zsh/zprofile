# Copyright (c) 2020 Xvezda <xvezda@naver.com>
#
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.

# Import tokens
export XVZD_VROOT_PATH="$HOME/vroot"
if [ -e "$XVZD_VROOT_PATH/usr/tokens" ]; then
    for tokens in $(ls -1 $XVZD_VROOT_PATH/usr/tokens/*.sh); do
        source $tokens
    done
fi

# Declare prepending paths
declare -a XVZD_PRE_PATHS=(
    "$XVZD_VROOT_PATH/usr/bin"
)

# Declare appending paths
declare -a XVZD_POST_PATHS

alias reload="exec zsh -l"

function abspath() {
    # https://stackoverflow.com/a/51264222/11621603
    # Takes a path argument and returns it as an absolute path.
    # No-op if the path is already absolute.

    local target="$1"

    if [ "$target" = "." ]; then
        echo "$(pwd)"
    elif [ "$target" = ".." ]; then
        echo "$(dirname "$(pwd)")"
    else
        echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
    fi
}

function xvzd_common_init() {

    # Define n prefix
    export N_PREFIX="$HOME/.nvm"

    XVZD_PRE_PATHS+=(
        "$N_PREFIX/bin"
    )

    # Load rvm
    [ -s "$HOME/.rvm/scripts/rvm" ] && source "$HOME/.rvm/scripts/rvm"

    # Load gvm
    [ -s "$HOME/.gvm/scripts/gvm" ] && source "$HOME/.gvm/scripts/gvm"

    test -z $XDG_CONFIG_HOME && export XDG_CONFIG_HOME="$HOME/.config"
    test -z $XDG_CACHE_HOME && export XDG_CACHE_HOME="$HOME/.cache"
    test -z $XDG_DATA_HOME && export XDG_DATA_HOME="$HOME/.local/share"

    if [ "$EDITOR" != "" ] && [ "$(basename $EDITOR)" = "nvim" ]; then
        alias vi="$EDITOR"
        alias vim="$EDITOR"
        alias vimdiff="$EDITOR -d"
    fi

    # rm to rm trash
    alias rm="rm -i"

    alias easy_install="easy_install --prefix=$HOME/.local"

    # https://github.com/clvv/fasd/issues/18#issuecomment-422921618
    if type fasd >/dev/null 2>&1; then
        eval "$(fasd --init posix-alias)" # Anything you want enabled BUT zsh-hook
        function _fasd_preexec() {
            { eval "fasd --proc '\$(fasd --sanitize '\$2')'"; } &|
        }
        autoload -Uz add-zsh-hook
        add-zsh-hook preexec _fasd_preexec

        alias v="f -e $EDITOR"
    fi

    if type thefuck >/dev/null 2>&1; then
        eval "$(thefuck --alias)"
    fi
}

# Mac specific commands
function xvzd_darwin_init() {
    # Mac specific paths
    XVZD_PRE_PATHS+=(
        # Brew path
        "/usr/local/bin"
        "/usr/local/sbin"

        # Libraries path
        "$HOME/Library/Python/2.7/bin"
        "$HOME/Library/Python/3.7/bin"
        "$HOME/development/flutter/bin"
        "/usr/local/opt/qt/bin"
        "/Library/TeX/Root/bin/x86_64-darwin"
        "/usr/local/opt/openssl/bin"
        "/usr/local/opt/john-jumbo/share/john"
        "/usr/local/opt/curl/bin"
    )

    XVZD_POST_PATHS+=(
        "$HOME/Library/Android/sdk/tools"
        "$HOME/Library/Android/sdk/platform-tools"
    )

    export PYTHONPATH="${PYTHONPATH}:$HOME/.local/lib/python2.7/site-packages:$HOME/.local/lib/python3.7/site-packages"

    export OPENSSL_INCLUDE_DIR="/usr/local/opt/openssl/include"
    export OPENSSL_LIB_DIR="/usr/local/opt/openssl/lib"

    function openvpn() {
        local binpath
        binpath=$(brew --prefix openvpn)/sbin/openvpn
        sudo $binpath "$@"
        alias openvpn="sudo $binpath"
    }

    alias ghidra="ghidraRun"

    export XVZD_CLIPBOARD="pbcopy"

    function del() {
        if [ -z "$1" ]; then
            >&2 echo 'usage: del file ...'
            return 1
        fi
        local fparg
        fparg=""
        for fp in "$@"; do
            if [ ! -e "$fp" ]; then
                >&2 echo "del: $fp: No such file or directory"
                return 1
            fi
            if [ "${fp:0:1}" != "/" ]; then
                fp="$PWD/$fp"
            fi
            fparg+="${fparg:+,}(POSIX file \"$fp\")"
        done
        osascript -e \
            "tell application \"Finder\" to delete every item of {$fparg}" \
            >/dev/null
    }
}

# Linux specific commands
function xvzd_linux_init() {
    function pbcopy() {
        xclip -selection clipboard
    }

    function pbpaste() {
        xclip -selection clipboard -o
    }

    export XVZD_CLIPBOARD="xclip"

    alias docker='sudo docker'
    alias docker-compose='sudo docker-compose'

    alias pip='python -m pip'
    alias pip3='python3 -m pip'

    if [ $XVZD_OSNAME = 'ubuntu' ]; then
        alias del="gvfs-trash"
    fi
}

# Windows specific commands
function xvzd_windows_init() {
    export PATH="${PATH}:$(wslpath $USERPROFILE)/bin"

    export DOCKER_TLS_VERIFY="1"
    export DOCKER_HOST="tcp://192.168.99.100:2376"
    export DOCKER_CERT_PATH="$(wslpath $USERPROFILE)/.docker/machine/machines/default"
    export DOCKER_MACHINE_NAME="default"
    export COMPOSE_CONVERT_WINDOWS_PATHS="true"

    alias docker-machine="docker-machine.exe"

    function open() {
        explorer.exe $(wslpath -w "$1")
    }

    export XVZD_CLIPBOARD="clip.exe"

    alias adb="adb.exe"
    alias clip="$XVZD_CLIPBOARD"

    export ORPORT=9150

    # http://www.maddogsw.com/cmdutils/
    alias del="Recycle.exe"
}

# Initialize commands
xvzd_common_init
if type xvzd_${XVZD_OSTYPE}_init &>/dev/null; then
    xvzd_${XVZD_OSTYPE}_init
fi

# Prepend paths
for p in "${XVZD_PRE_PATHS[@]}"; do
    if [ -z "$XVZD_PRE_PATH" ]; then
        export XVZD_PRE_PATH="$p"
    else
        export XVZD_PRE_PATH="${XVZD_PRE_PATH}:$p"
    fi
done
[ ! -z "$XVZD_PRE_PATH" ] && export PATH="$XVZD_PRE_PATH:$PATH"

# Append paths
for p in "${XVZD_POST_PATHS[@]}"; do
    if [ -z "$XVZD_POST_PATH" ]; then
        export XVZD_POST_PATH="$p"
    else
        export XVZD_POST_PATH="${XVZD_POST_PATH}:$p"
    fi
done
[ ! -z "$XVZD_POST_PATH" ] && export PATH="$PATH:$XVZD_POST_PATH"


# Fix telnet tmux issue
alias telnet='TERM=xterm telnet'

# SSH with remote clipboard alias
function sshclip() {
    # Send signal directly to netcat when exit to break while loop
    DIRECT_SIG="pbpaste | base64 | nc localhost 7331"
    trap 'eval "${DIRECT_SIG}"' INT TERM EXIT

    REMOTE_SCRIPT="/bin/bash $HOME/.ssh/remote.sh"
    ( eval "$REMOTE_SCRIPT" & ) > /dev/null 2>&1
    ssh -R 1337:localhost:7331 "$@"
    ( eval "sleep 3 && ${DIRECT_SIG}" & ) > /dev/null 2>&1
}
if [ -z "$ORPORT" ]; then
    export ORPORT=9050
fi

# Get pid by port
function pidofport() {
    case $XVZD_OSTYPE in
        darwin)
            lsof -nP -i:$1 | grep LISTEN | awk '{ print $2 }'
            ;;
    esac
}

# Get process name by pid
function pnameofpid() {
    [ ! -z "$1" ] && ps -p $1 -o comm=
}

function gpgenc() {
    if [ -z "$1" ]; then
        >&2 echo "usage: $0 [files ...]"
        return 1
    fi
    local gpg_prog
    gpg_prog="$(type gpg2 &>/dev/null && echo gpg2 || echo gpg)"

    local userid
    local passphrase

    echo -n 'Enter User ID: '
    read userid

    echo -n 'Enter passphrase: '
    read -s passphrase

    echo

    # Check inputs are valid
    "$gpg_prog" -r "$userid" --passphrase "$passphrase" \
        --dry-run --symmetric --encrypt "$1"
    if [ $? -ne 0 ]; then
        >&2 echo "$0: Inputs are invalid. Try again."
        return 1
    fi

    for arg in "$@"; do
        if [ ! -e $arg ]; then
            return 1
        fi
        "$gpg_prog" -r "$userid" --passphrase "$passphrase" \
            --symmetric --encrypt "$arg" &
        if [ $? -ne 0 ]; then
            >&2 echo "$0: Something goes wrong. Please check out error messages."
            return 1
        fi
    done
    >&2 echo "$0: Encrypting $# files..."
    wait
    >&2 echo "$0: Done!"
}

# Encrypt/Decrypt functions
export ENCITER=20000

function encf() {
    openssl aes-256-cbc -salt -in $1 -out $1.enc
}

function encs() {
    echo "$@" | openssl enc -aes-256-cbc -a -salt -pbkdf2 -iter $ENCITER
}

function decf() {
    openssl aes-256-cbc -d -salt -in $1 -out ${1%.enc}.new
}

function decs() {
    echo "$@" | openssl enc -aes-256-cbc -d -a -pbkdf2 -iter $ENCITER -salt
}

# Reverse of split; which abbreviation of combine (Just for convenience)
function comb() {
    cat $1.* > $1
}

# Bring help to zsh
function help() {
    bash -c "command help $@"
}

# https://unix.stackexchange.com/a/391230
function freeze_history () {
    fc -A
    fc -p $HISTFILE
    unset HISTFILE
}

function unfreeze_history () {
    fc -P
}


# Open URL with web browser
function wopen() {
    python -m webbrowser -t "$1"
}

function gpg_() {
    export GPG_TTY=$(tty)
    command gpg2 $@
}
alias gpg="eval gpg_"

# Aliases
alias proxychains="proxychains4"

# Never overwrite by mv
alias mv='mv -n'

# Exclude when zip from command line
alias zip='zip -x "*.DS_Store"'

# Activate python virtualenv
alias activate='source venv/bin/activate'

# Create default virtualenv
alias mkenv='virtualenv venv'

# Create pip requirements
alias mkreq='python -m pip freeze > requirements.txt'
