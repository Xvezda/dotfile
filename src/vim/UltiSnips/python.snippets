# Copyright (c) 2018 Xvezda <https://xvezda.com>

snippet env "env path" b
#!/usr/bin/env ${1:python}
$0
endsnippet

snippet coding "encoding" b
# -*- coding: ${1:utf-8} -*-
$0
endsnippet

snippet #! "shebang header" b
#!/usr/bin/env python
# -*- coding: utf-8 -*-
$0
endsnippet

snippet future "make python version compatible" b
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
$0
endsnippet

snippet docs "make doc string tripple quotes"
"""$0"""
endsnippet

snippet doxy "create doc string with doxygen syntax"
"""!$0"""
endsnippet

snippet main "generate skeleton main function" b
def main($2):
	${1:pass}
$0
endsnippet

snippet ifmain "generate skeleton main function" b
if __name__ == '__main__':
	${1:main($2)}
$0
endsnippet

snippet mb "generate main boilerplate" b
def main($2):
	${1:pass}


if __name__ == '__main__':
	${3:main($4)}
$0
endsnippet

snippet setup "setup file boilerplate" b
from setuptools import setup, find_packages


with open('$1/__version__.py') as f:
    exec(f.read())


def readme():
    with open('${2:README.md}') as f:
        return f.read()


setup(name='$1',
      author='$3',
      author_email='$4',
      license='$5',
      url='$6',
      keywords=[$7],
      version=__version__,
      packages=find_packages(),
      description='$8',
      long_description_content_type='$9',
      long_description=readme(),
      classifiers=[$10],
      zip_safe=False)
endsnippet

snippet msuper "enforce multiple initializer call of multiple inherited class"
for ${1:base} in getattr(self.__class__, '__bases__'):
	$1.__init__(self)
endsnippet


# vim:ft=snippets:
