test -z $XDG_CONFIG_HOME && export XDG_CONFIG_HOME="$HOME/.config"
test -z $XDG_CACHE_HOME && export XDG_CACHE_HOME="$HOME/.cache"
test -z $XDG_DATA_HOME && export XDG_DATA_HOME="$HOME/.local/share"

if [ "$EDITOR" != "" ] && [ "$(basename $EDITOR)" = "nvim" ]; then
    alias vi="$EDITOR"
    alias vim="$EDITOR"
    alias vimdiff="$EDITOR -d"
fi

# Windows specific commands
if [ "$XVZD_OSTYPE" = "windows" ]; then
    export PATH="${PATH}:$(wslpath $USERPROFILE)/bin"

    export DOCKER_TLS_VERIFY="1"
    export DOCKER_HOST="tcp://192.168.99.100:2376"
    export DOCKER_CERT_PATH="$(wslpath $USERPROFILE)/.docker/machine/machines/default"
    export DOCKER_MACHINE_NAME="default"
    export COMPOSE_CONVERT_WINDOWS_PATHS="true"

    alias docker-machine="docker-machine.exe"

    function open() {
        explorer.exe $(wslpath -w "$1")
    }

    export XVZD_CLIPBOARD="clip.exe"

    alias adb="adb.exe"
    alias clip="$XVZD_CLIPBOARD"

    export ORPORT=9150
fi

# Linux specific commands
if [ "$XVZD_OSTYPE" = "linux" ]; then
    function pbcopy() {
        xclip -selection clipboard
    }

    function pbpaste() {
        xclip -selection clipboard -o
    }

    export XVZD_CLIPBOARD="xclip"

    alias docker='sudo docker'
    alias docker-compose='sudo docker-compose'

    alias pip='python -m pip'
    alias pip3='python3 -m pip'
fi

# Mac specific commands
if [ "$XVZD_OSTYPE" = "darwin" ]; then
    export OPENSSL_INCLUDE_DIR="/usr/local/opt/openssl/include"
    export OPENSSL_LIB_DIR="/usr/local/opt/openssl/lib"

    function ctags() {
        $(brew --prefix)/bin/ctags "$@"
    }

    function openvpn() {
        sudo $(brew --prefix openvpn)/sbin/openvpn "$@"
    }

    alias ghidra="ghidraRun"

    export XVZD_CLIPBOARD="pbcopy"
fi

# rm to rm trash
alias rm="rm -i"
function del() {
    RM_TRASH__="rm -i"
    case $XVZD_OSTYPE in
        darwin)
            if type rmtrash > /dev/null 2>&1; then
                local fxpath
                fxpath='/System/Library/Components/CoreAudio.component/Contents/SharedSupport/SystemSounds/finder/move to trash.aif'
                rmtrash "$@" && (afplay "$fxpath" &)
                return
            fi
            ;;
        linux)
            if [ $XVZD_OSNAME = 'ubuntu' ]
            then
                RM_TRASH__="gvfs-trash"
            fi
            ;;
        windows)
            # http://www.maddogsw.com/cmdutils/
            RM_TRASH__="Recycle.exe"
            ;;
    esac
    $RM_TRASH__ "$@"
}


# Fix telnet tmux issue
alias telnet='TERM=xterm telnet'

# SSH with remote clipboard alias
function sshclip() {
    # Send signal directly to netcat when exit to break while loop
    DIRECT_SIG="pbpaste | base64 | nc localhost 7331"
    trap 'eval "${DIRECT_SIG}"' INT TERM EXIT

    REMOTE_SCRIPT="/bin/bash $HOME/.ssh/remote.sh"
    ( eval "$REMOTE_SCRIPT" & ) > /dev/null 2>&1
    ssh -R 1337:localhost:7331 "$@"
    ( eval "sleep 3 && ${DIRECT_SIG}" & ) > /dev/null 2>&1
}
if [ -z "$ORPORT" ]; then
    export ORPORT=9050
fi

# Get pid by port
function pidofport() {
    case $XVZD_OSTYPE in
        darwin)
            lsof -nP -i:$1 | grep LISTEN | awk '{ print $2 }'
            ;;
    esac
}

# Get process name by pid
function pnameofpid() {
    [ ! -z "$1" ] && ps -p $1 -o comm=
}

# Encrypt/Decrypt functions
function encf() {
    openssl aes-256-cbc -salt -in $1 -out $1.enc
}

function encs() {
    echo "$@" | openssl enc -aes-256-cbc -a -salt -pbkdf2 -iter 20000
}

function decf() {
    openssl aes-256-cbc -d -salt -in $1 -out ${1%.enc}.new
}

function decs() {
    echo "$@" | openssl enc -aes-256-cbc -d -a -pbkdf2 -iter 20000 -salt
}

# Reverse of split; which abbreviation of combine (Just for convenience)
function comb() {
    cat $1.* > $1
}

# Bring help to zsh
function help() {
    bash -c "command help $@"
}

# https://unix.stackexchange.com/a/391230
function freeze_history () {
    fc -A
    fc -p $HISTFILE
    unset HISTFILE
}

function unfreeze_history () {
    fc -P
}


# Open URL with web browser
function wopen() {
    python -m webbrowser -t "$1"
}

function gpg_() {
    export GPG_TTY=$(tty)
    command gpg2 $@
}
alias gpg="eval gpg_"

# Aliases
alias proxychains="proxychains4"

# Never overwrite by mv
alias mv='mv -n'

# Exclude when zip from command line
alias zip='zip -x "*.DS_Store"'

# Activate python virtualenv
alias activate='source venv/bin/activate'

# Create default virtualenv
alias mkenv='virtualenv env'

# Create pip requirements
alias mkreq='python -m pip freeze > requirements.txt'
