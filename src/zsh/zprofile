test -z $XDG_CONFIG_HOME && export XDG_CONFIG_HOME="$HOME/.config"
test -z $XDG_CACHE_HOME && export XDG_CACHE_HOME="$HOME/.cache"
test -z $XDG_DATA_HOME && export XDG_DATA_HOME="$HOME/.local/share"

alias vi="$EDITOR"
alias vim="$EDITOR"
alias vimdiff="$EDITOR -d"

# Windows specific commands
if [ "$XVZD_OSTYPE" = "windows" ]
then
    export DOCKER_TLS_VERIFY="1"
    export DOCKER_HOST="tcp://192.168.99.100:2376"
    export DOCKER_CERT_PATH="$(wslpath $USERPROFILE)/.docker/machine/machines/default"
    export DOCKER_MACHINE_NAME="default"
    export COMPOSE_CONVERT_WINDOWS_PATHS="true"

    open () {
        explorer.exe $(wslpath -w "$1")
    }
fi

# Linux specific commands
if [ "$XVZD_OSTYPE" = "linux" ]
then
    pbcopy() {
        xclip -selection clipboard
    }

    pbpaste() {
        xclip -selection clipboard -o
    }

    alias docker='sudo docker'
    alias docker-compose='sudo docker-compose'

    alias pip='python -m pip'
fi

# Mac specific commands
if [ "$XVZD_OSTYPE" = "darwin" ]
then
    ctags() {
        $(brew --prefix)/bin/ctags "$@"
    }

    openvpn() {
        sudo $(brew --prefix openvpn)/sbin/openvpn "$@"
    }
fi

# rm to rm trash
alias rm="echo Use 'del', or the full path e.g.'/bin/rm'"
del() {
    RM_TRASH__=""
    case $XVZD_OSTYPE in
        darwin)
            which rmtrash && RM_TRASH__="rmtrash"
            ;;
        linux)
            if [ $XVZD_OSNAME = 'ubuntu' ]
            then
                RM_TRASH__="gvfs-trash"
            fi
            ;;
    esac
    $RM_TRASH__ "$@"
}

# Additional git alias
gcod() {
    git checkout develop
}

gcom() {
    git checkout master
}

gpoc() {
    git push -u origin $(git branch | head -n 1 | awk '{ print $2 }')
}
alias gs="git status"

# Docker stuffs
drl() {
    docker rm $(docker ps -a -q -l -f status=exited)
}

dsl() {
    docker stop $(docker ps -lqf status=running)
}

dre() {
    docker rm -v $(docker ps -a -q -f status=exited)
}
alias dim="docker images"
alias drmi="docker rmi"
alias drm="docker rm"
alias dps="docker ps"
alias dpsa="docker ps -a"


# Fix telnet tmux issue
alias telnet='TERM=xterm telnet'

# SSH with remote clipboard alias
ssh-clip() {
    # Send signal directly to netcat when exit to break while loop
    DIRECT_SIG="pbpaste | base64 | nc localhost 7331"
    trap 'eval "${DIRECT_SIG}"' INT TERM EXIT

    REMOTE_SCRIPT="/bin/bash $HOME/.ssh/remote.sh"
    ( eval "$REMOTE_SCRIPT" & ) > /dev/null 2>&1
    ssh -R 1337:localhost:7331 "$@"
    ( eval "sleep 3 && ${DIRECT_SIG}" & ) > /dev/null 2>&1
}

# Encrypt/Decrypt functions
encf() {
    openssl aes-256-cbc -salt -in $1 -out $1.enc
}

encs() {
    echo "$1" | openssl aes-256-cbc -a -salt
}

decf() {
    openssl aes-256-cbc -d -salt -in $1 -out ${1%.enc}.new
}

decs() {
    echo "$1" | openssl aes-256-cbc -d -a -salt
}

# Reverse of split; which abbreviation of combine (Just for convenience)
comb() {
    cat $1.* > $1
}

# Exclude when zip from command line
alias zip='zip -x "*.DS_Store"'

# Activate python virtualenv
alias activate='source env/bin/activate'

# Python alias
alias py3='python3'
alias py2='python2'

# Create default virtualenv
alias mkenv='virtualenv env'
alias mkenv3='virtualenv -p python3 env'

# Create pip requirements
alias mkreq='pip freeze > requirements.txt'
